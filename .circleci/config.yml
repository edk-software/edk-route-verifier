version: 2
jobs:
  build:
    docker:
      - image: circleci/node:8.15-browsers

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}-{{ checksum "server/package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: Download and install Google Chrome (latest)
          command: |
            wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
            sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
            sudo apt-get update
            sudo apt-get --fix-broken --only-upgrade install google-chrome-stable

      - run:
          name: Install application dependencies
          command: npm install

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}-{{ checksum "server/package.json" }}

      - run:
          name: Create application bundle file
          command: npm run build:prod

      - persist_to_workspace:
          root: ~/
          paths:
            - repo

  size:
    docker:
      - image: circleci/node:8.15-browsers

    working_directory: ~/repo

    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Check bundle size
          command: npm run check:size

  code:
    docker:
      - image: circleci/node:8.15-browsers

    working_directory: ~/repo

    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Check code style
          command: npm run check:code

  test:
    docker:
      - image: circleci/node:8.15-browsers

    working_directory: ~/repo

    steps:
      - attach_workspace:
          at: ~/

      - run:
          name: Install test server dependencies
          command: |
            cd server
            npm install

      - run:
          name: Create test configuration file
          command: |
            cp server/config.json.template server/config.json
            sed -i "s/GOOGLE_MAPS_API_KEY/$GOOGLE_MAPS_API_KEY/i" server/config.json

      - run:
          name: Start test server
          command: npm run start:prod
          background: true

      - run:
          name: Wait for test server to be running
          shell: /bin/sh
          command: |
            wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 10 http://localhost:$PORT
            :

      - run:
          name: Run tests
          command: npm run check:e2e

workflows:
  version: 2
  build-test-check:
    jobs:
      - build
      - code:
          requires:
            - build
      - size:
          requires:
            - build
      - test:
          requires:
            - build